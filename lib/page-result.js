// Generated by CoffeeScript 1.4.0
(function() {
  var Button, PageResult, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  Button = require('./button');

  /*
  The result of a db request containing used for paging
  */


  module.exports = PageResult = (function() {
    /*
      Initializes a new instance of page result.
    */

    function PageResult(items, totalCount, requestOffset, requestCount, baseUrl) {
      this.items = items != null ? items : [];
      this.totalCount = totalCount != null ? totalCount : 0;
      this.requestOffset = requestOffset != null ? requestOffset : 0;
      this.requestCount = requestCount != null ? requestCount : 25;
      this.baseUrl = baseUrl != null ? baseUrl : null;
      this.toRest = __bind(this.toRest, this);

      this.directButtons = __bind(this.directButtons, this);

      this.createButton = __bind(this.createButton, this);

      this.prevButton = __bind(this.prevButton, this);

      this.nextButton = __bind(this.nextButton, this);

      this.prevButtonEnabled = __bind(this.prevButtonEnabled, this);

      this.nextButtonEnabled = __bind(this.nextButtonEnabled, this);

      this.currentPageAsString = __bind(this.currentPageAsString, this);

      this.pageToString = __bind(this.pageToString, this);

      this.numberOfPages = __bind(this.numberOfPages, this);

      this.lastPage = __bind(this.lastPage, this);

      this.firstPage = __bind(this.firstPage, this);

      this.currentPage = __bind(this.currentPage, this);

    }

    /*
      Paging with requestCount 5, lifeStreaming requestOffset here:
      0 -> 0
      5 -> 1
      10 -> 2
    */


    PageResult.prototype.currentPage = function() {
      return Math.floor(this.requestOffset / this.requestCount);
    };

    PageResult.prototype.firstPage = function() {
      return 0;
    };

    /*
      Last Page - Paging with requestCount = 5
      0 .. -1
      1 .. 0
      2 .. 0
      3 .. 0
      4 .. 0
      5 .. 0
      6 .. 1
      7 .. 1
      8 .. 1
    */


    PageResult.prototype.lastPage = function() {
      return this.numberOfPages() - 1;
    };

    /*
      Paging with requestCount = 5
      0 .. 0
      1 .. 1
      2 .. 1
      3 .. 1
      4 .. 1
      5 .. 1
      6 .. 2
      7 .. 2
      8 .. 2
    */


    PageResult.prototype.numberOfPages = function() {
      return Math.floor((this.totalCount - 1) / this.requestCount) + 1;
    };

    PageResult.prototype.pageToString = function(page) {
      return "" + (page + 1);
    };

    PageResult.prototype.currentPageAsString = function() {
      return this.pageToString(this.currentPage());
    };

    PageResult.prototype.nextButtonEnabled = function() {
      return this.numberOfPages() > 1 && this.currentPage() < this.lastPage();
    };

    PageResult.prototype.prevButtonEnabled = function() {
      return this.numberOfPages() > 1 && this.currentPage() > 0;
    };

    PageResult.prototype.nextButton = function() {
      var nextPage;
      nextPage = this.currentPage() + 1;
      if (nextPage > this.lastPage()) {
        nextPage = this.firstPage();
      }
      return this.createButton(nextPage);
    };

    PageResult.prototype.prevButton = function() {
      var prevPage;
      prevPage = this.currentPage() - 1;
      if (prevPage < 0) {
        prevPage = this.lastPage();
      }
      return this.createButton(prevPage);
    };

    PageResult.prototype.createButton = function(page) {
      return new exports.Button(false, this.pageToString(page), this.currentPage() === page, ["page=" + (page + 1), "count=" + this.requestCount, "offset=" + (page * this.requestCount)], this.baseUrl);
    };

    PageResult.prototype.directButtons = function() {
      var endIndex, page, result, startIndex, _i, _j, _ref;
      result = [];
      if (this.numberOfPages() <= 9) {
        for (page = _i = 0, _ref = this.numberOfPages() - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; page = 0 <= _ref ? ++_i : --_i) {
          result.push(this.createButton(page));
        }
      } else {
        result.push(this.createButton(0));
        startIndex = this.currentPage() - 3;
        if (startIndex < 1) {
          startIndex = 1;
        }
        if (startIndex > 1) {
          result.push(new exports.Button(true));
        }
        endIndex = startIndex + 6;
        if (endIndex >= this.lastPage()) {
          endIndex = this.lastPage - 1;
        }
        for (page = _j = startIndex; startIndex <= endIndex ? _j <= endIndex : _j >= endIndex; page = startIndex <= endIndex ? ++_j : --_j) {
          result.push(this.createButton(page));
        }
        if (endIndex < this.lastPage() - 1) {
          result.push(new exports.Button(true));
        }
        result.push(this.createButton(this.lastPage()));
      }
      return result;
    };

    PageResult.prototype.toRest = function(baseUrl, actor) {
      var result,
        _this = this;
      result = {
        totalCount: this.totalCount,
        requestOffset: this.requestOffset,
        requestCount: this.requestCount,
        items: _.map(this.items, function(x) {
          if (x.toRest) {
            return x.toRest(baseUrl, actor);
          } else {
            return x;
          }
        })
      };
      return result;
    };

    return PageResult;

  })();

}).call(this);
